{"version":3,"sources":["firebaseDb/index.ts","place.tsx","components/delete-item-form/index.tsx","components/modals/delete-item/index.tsx","components/add-item-form/index.tsx","components/modals/add-item/index.tsx","App.tsx","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","clickedId","fireStore","clickedParts","Place","id","name","parts","setSelect","setSelectedPlace","className","onClick","getId","getParts","Item","placeID","count","PlaceList","props","places1","map","place","placeId","topLvl","console","log","drawParts","key","data","OptGroup","Select","Option","DeleteItemForm","React","memo","inventory","selectedPlace","setSelectedItem","initialValues","itemForRemove","onSubmit","enableReinitialize","onChange","label","item","value","DeleteItemModal","isVisible","setIsVisible","setInventory","useState","selectedItem","isLoading","setIsLoading","useCallback","firestore","collection","doc","delete","then","get","response","docs","x","notification","error","message","description","useSubmit","title","visible","onOk","confirmLoading","onCancel","AddItemForm","places","setCount","setInventoryName","setPlaceId","inventoryName","min","max","defaultValue","placeholder","onBlur","event","target","AddItemModal","set","App","setPlaces","setSelectPlace","isModalVisible","setIsModalVisible","openedAddItemModal","setOpenedAddItemModal","useEffect","part","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e1a9c38.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\r\n    authDomain: \"dv-inventory.firebaseapp.com\",\r\n    databaseURL: \"https://dv-inventory.firebaseio.com\",\r\n    projectId: \"dv-inventory\",\r\n    storageBucket: \"dv-inventory.appspot.com\",\r\n    messagingSenderId: \"130062240176\",\r\n    appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\"\r\n};\r\n\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const fireStore = firebase.firestore()","import React from 'react';\r\nimport {IPlaces} from \"./App\";\r\n\r\nlet clickedId:any;\r\nclickedId=null;\r\nconst getId = (id:any) =>{\r\n    clickedId=id;\r\n}\r\n\r\nlet clickedParts:any;\r\nclickedParts=null;\r\nconst getParts = (parts:any) =>{\r\n    clickedParts=parts;\r\n}\r\n\r\nexport function Place({id, name, parts, setSelect, setSelectedPlace}:any){\r\n\r\n    return(\r\n        <div>\r\n            <button className = \"place\" onClick={() => {\r\n                setSelect(id); \r\n                getId(id);\r\n                setSelectedPlace(id);\r\n                getParts(parts)}}\r\n            >\r\n                {name}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function Item({id, placeID, name, count}:any){\r\n    if(placeID===clickedId){\r\n        return(\r\n            <div className = \"item\">\r\n                <div className=\"itemname\">{name}</div>\r\n                <div className=\"itemcount\">{count}</div>\r\n                {/* <div className=\"item-instance\">{id}</div> */}\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(null)\r\n    }\r\n}\r\n\r\nexport function ItemList(selectedItems:any){\r\n    return(\r\n        <h1>{selectedItems.lengh}</h1>\r\n    )\r\n}\r\n\r\nexport function PlaceList(props:{places1:IPlaces[] | undefined, setSelect:(value:any) => void, setSelectedPlace:(values:string) => void }){\r\n    const {places1, setSelect, setSelectedPlace} = props;\r\n\r\n    const topLvl = (placeId:string) => {\r\n        if(places1 && placeId){\r\n            for (const place of places1){\r\n                if (place.parts){\r\n                    for(const partId of place.parts){\r\n                        if(partId===placeId){\r\n                            return(false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return(true);\r\n        }\r\n    }\r\n\r\n    const drawParts = (placeId:string) => {\r\n        if(clickedParts){\r\n            for (const parts of clickedParts){\r\n                console.log(parts);\r\n                if(placeId===parts){\r\n                    console.log(placeId);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>{places1?.map((place:any) => {\r\n            if(topLvl(place.id) || drawParts(place.id)){\r\n            return(\r\n                <Place \r\n                  key = {place.id}\r\n                  name = {place.data.name} \r\n                  parts = {place.parts} \r\n                  id = {place.id}\r\n                  setSelect={setSelect}\r\n                  setSelectedPlace={setSelectedPlace}\r\n                />\r\n            )\r\n            }\r\n        })}</div>\r\n    )\r\n}","import React  from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form, Select} from 'formik-antd';\r\n// import \"antd/dist/antd.css\";\r\nimport \"antd/dist/antd.less\";\r\nimport { IInventory } from \"../../App\";\r\n\r\nconst { OptGroup, Option } = Select;\r\n\r\ninterface IProps{\r\n    inventory:IInventory[] | undefined;\r\n    selectedPlace:string | undefined;\r\n    setSelectedItem: (state:string) => void;\r\n}\r\ninterface IInitialValues {\r\n    itemForRemove:string;\r\n    \r\n}\r\n\r\nexport const DeleteItemForm = React.memo((props:IProps) => {\r\n    const {inventory,selectedPlace,setSelectedItem} = props;\r\n    const initialValues = {\r\n        itemForRemove: \"\",\r\n    }\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={initialValues}\r\n            onSubmit={()=>{}}\r\n            enableReinitialize>\r\n            {() => (\r\n                <Form>\r\n                    <Select name=\"itemForRemove\" className=\"select\" onChange={setSelectedItem}>\r\n                        <OptGroup label=\"Delete Item\" className=\"optGroup\">\r\n                            {inventory?.map((item) => {\r\n                                if(selectedPlace === item.placeId){\r\n                                    return <Option className=\"option\"\r\n                                            key={item.id}\r\n                                            value={item.id}\r\n                                            >\r\n                                                {item.data.name === \"\" ? \"Unknown Item\" : item.data.name} - {item.id}\r\n                                            </Option>\r\n                                }\r\n                                \r\n                            })}\r\n                        </OptGroup>\r\n                    </Select>\r\n                </Form>\r\n                \r\n            )}\r\n        </Formik>\r\n    )\r\n});\r\n\r\n","import React, { useState, useCallback } from 'react';\r\nimport { Modal,notification } from 'antd';\r\nimport { DeleteItemForm } from '../../delete-item-form';\r\nimport { IInventory } from '../../../App';\r\nimport firebase from 'firebase';\r\nimport { fireStore } from '../../../firebaseDb';\r\n\r\ninterface IProps {\r\n    isVisible:boolean;\r\n    inventory:IInventory[] | undefined;\r\n    selectedPlace:string | undefined;\r\n    setInventory:(inventory:IInventory[]) => void;\r\n    setIsVisible:(state:boolean) => void;\r\n};\r\n\r\nexport const DeleteItemModal = React.memo((props:IProps) => {\r\n    const {\r\n        isVisible,\r\n        setIsVisible,\r\n        inventory,\r\n        selectedPlace,\r\n        setInventory\r\n    } = props;\r\n\r\n    const [selectedItem, setSelectedItem] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n    const onSubmit = useSubmit(setInventory,setIsLoading);\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Delete Item\"\r\n            visible={isVisible}\r\n            onOk={() => {\r\n                // setIsVisible(false)\r\n                onSubmit(selectedItem,setIsVisible)\r\n            }}\r\n            confirmLoading={isLoading}\r\n            onCancel={() => {\r\n                setIsVisible(false)\r\n            }}\r\n        >\r\n            <DeleteItemForm \r\n                inventory={inventory}\r\n                selectedPlace={selectedPlace}\r\n                setSelectedItem={setSelectedItem}\r\n            />\r\n        </Modal>\r\n    )\r\n});\r\n\r\nfunction useSubmit(setInventory:any,setIsLoading:any){\r\n    return useCallback((\r\n        value: string,\r\n        setIsVisible:any,\r\n    ) => {\r\n        if(value === \"\"){\r\n            notification.error({\r\n                message: \"Oops...\",\r\n                description: \"Field must be filled\",\r\n            });\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        firebase.firestore().collection(\"inventory\").doc(value).delete().then(() => {\r\n                fireStore.collection(\"inventory\").get().then(response => { \r\n                    const docs = response.docs.map(x => ({ \r\n                        id: x.id,\r\n                        data: x.data(), \r\n                        placeId: x.data().place?.id\r\n                    })); \r\n                    setInventory(docs);\r\n                    setIsLoading(false);\r\n                    setIsVisible(false);\r\n                });\r\n            });\r\n    },[setInventory, setIsLoading]);\r\n}","import React, { Dispatch, SetStateAction }  from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form } from 'formik-antd';\r\nimport \"antd/dist/antd.less\";\r\n// import \"antd/dist/antd.css\";\r\nimport { IPlaces } from \"../../App\";\r\nimport { InputNumber, Input, } from 'antd';\r\nimport {Select} from 'formik-antd';\r\n\r\nconst { OptGroup, Option } = Select;\r\n\r\n\r\ninterface IProps{\r\n    places:IPlaces[] |undefined;\r\n    setCount:(state:string | number | undefined) => void;\r\n    setInventoryName:Dispatch<SetStateAction<string>>;\r\n    setPlaceId:Dispatch<SetStateAction<string>>;\r\n};\r\ninterface IInitialValues {};\r\n\r\nexport const AddItemForm = React.memo((props:IProps) => {\r\n    const {\r\n        places,\r\n        setCount,\r\n        setInventoryName,\r\n        setPlaceId,\r\n    } = props;\r\n    const initialValues = {\r\n        count:1,\r\n        inventoryName:\"\",\r\n        placeId:\"\",\r\n    }\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={initialValues}\r\n            onSubmit={()=>{}}\r\n            enableReinitialize>\r\n            {() => (\r\n                <Form>\r\n                    <InputNumber \r\n                        min={1}\r\n                        max={99}\r\n                        name=\"count\"\r\n                        defaultValue={initialValues.count}\r\n                        onChange={setCount}\r\n                    />\r\n                    <Input \r\n                        name=\"inventoryName\"\r\n                        placeholder=\"Inventory name\"\r\n                        defaultValue={initialValues.inventoryName}\r\n                        onBlur={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                            setInventoryName(event.target.value)\r\n                        }}\r\n                    />\r\n                    <Select name=\"placeId\" className=\"select\" onChange={setPlaceId}>\r\n                        <OptGroup label=\"Delete Item\" className=\"optGroup\">\r\n                            {places?.map((place) => {\r\n                                return <Option className=\"option\"\r\n                                            key={place.id}\r\n                                            value={place.id}\r\n                                        >\r\n                                            {place.data.name === \"\" ? \"Unknown place\" : place.data.name}\r\n                                        </Option>\r\n                            })}\r\n                        </OptGroup>\r\n                    </Select>\r\n                </Form>\r\n                \r\n            )}\r\n        </Formik>\r\n    )\r\n});\r\n\r\n","import React, { useState, useCallback } from 'react';\r\nimport { Modal, notification } from 'antd';\r\nimport { IInventory } from '../../../App';\r\nimport firebase from 'firebase';\r\nimport { fireStore } from '../../../firebaseDb';\r\nimport { AddItemForm } from '../../add-item-form';\r\nimport { IPlaces } from '../../../App';\r\n\r\ninterface IProps {\r\n    isVisible:boolean;\r\n    places:IPlaces[] | undefined;\r\n    setInventory:(inventory:IInventory[]) => void;\r\n    setIsVisible:(state:boolean) => void;\r\n};\r\n\r\nexport const AddItemModal = React.memo((props:IProps) => {\r\n    const {places} = props;\r\n    const {\r\n        isVisible,\r\n        setIsVisible,\r\n        setInventory,\r\n    } = props;\r\n\r\n    const [count, setCount] = useState<string | number | undefined>(1)\r\n    const [inventoryName, setInventoryName] = useState<string>(\"\")\r\n    const [placeId, setPlaceId] = useState<string>(\"\")\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n    const onSubmit = useSubmit(setInventory,setIsLoading);\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Add Item\"\r\n            visible={isVisible}\r\n            onOk={() => {\r\n                onSubmit(count,inventoryName,placeId,setIsVisible)\r\n            }}\r\n            confirmLoading={isLoading}\r\n            onCancel={() => {\r\n                setIsVisible(false)\r\n            }}\r\n        >\r\n            <AddItemForm places={places} setCount={setCount} setInventoryName={setInventoryName} setPlaceId={setPlaceId}/>\r\n        </Modal>\r\n    )\r\n});\r\n\r\nfunction useSubmit(setInventory:any,setIsLoading:any){\r\n    return useCallback((\r\n        count: string | number | undefined,\r\n        inventoryName:string,\r\n        placeId:string,\r\n        setIsVisible:any,\r\n    ) => {\r\n        if(!count ||  !inventoryName || !placeId){\r\n            notification.error({\r\n                message: \"Oops...\",\r\n                description: \"Fields must be filled\",\r\n            });\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n\r\n        firebase.firestore().collection(\"inventory\").doc().set({ \r\n            name: inventoryName, \r\n            count: count, \r\n            place: firebase.firestore().collection(\"places\").doc(placeId) // main-101 – id места\r\n        }).then(() => {\r\n            fireStore.collection(\"inventory\").get().then(response => { \r\n                const docs = response.docs.map(x => ({ \r\n                    id: x.id,\r\n                    data: x.data(), \r\n                    placeId: x.data().place?.id\r\n                })); \r\n                setInventory(docs);\r\n                setIsLoading(false);\r\n                setIsVisible(false);\r\n            });\r\n        });\r\n    },[setInventory, setIsLoading]);\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport * as firebase from 'firebase';\r\nimport {fireStore} from \"./firebaseDb/index\";\r\nimport {Item, PlaceList} from \"./place\"\r\nimport {DeleteItemModal} from \"./components/modals/delete-item\"\r\nimport { AddItemModal } from './components/modals/add-item';\r\n\r\nexport interface IPlaces{\r\n    id: string;\r\n    data: firebase.firestore.DocumentData;\r\n    parts: any;\r\n}\r\n\r\nexport interface IInventory{\r\n  id: string;\r\n  data: firebase.firestore.DocumentData;\r\n  placeId: any;\r\n}\r\n\r\nexport const App = React.memo(() => {\r\n\r\n    const [places, setPlaces] = useState<IPlaces[]>();\r\n    const [inventory, setInventory] = useState<IInventory[]>();\r\n    const [selectPlace, setSelectPlace] = useState();\r\n    //const [showItem, setShowItem] = useState(false);\r\n    // console.log(selectPlace);\r\n    //console.log(places);\r\n    // console.log(inventory);\r\n    const [selectedPlace, setSelectedPlace] = useState<string>(\"\");\r\n    const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\r\n    const [openedAddItemModal, setOpenedAddItemModal] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    fireStore.collection(\"places\").get().then(response => { \r\n          const docs = response.docs.map(x => ({ \r\n            id: x.id,\r\n            data: x.data(), \r\n            parts: x.data().parts && x.data().parts.map((part:any) => part?.id) \r\n          })); \r\n          setPlaces(docs)\r\n    });\r\n  \r\n    fireStore.collection(\"inventory\").get().then(response => { \r\n      const docs = response.docs.map(x => ({ \r\n        id: x.id,\r\n        data: x.data(), \r\n        placeId: x.data().place?.id\r\n      })); \r\n      setInventory(docs);\r\n    });\r\n  },[]);\r\n\r\n  return (\r\n    <div className = \"App\">\r\n      <div className=\"places\">\r\n        <div className=\"placeshead\">Places</div>\r\n        <PlaceList places1={places} setSelect={setSelectPlace} setSelectedPlace={setSelectedPlace}/>\r\n      </div>\r\n      <div className = \"items\">\r\n        <div className=\"itemshead\">Items</div>\r\n        <div className=\"itemsproperties\">\r\n          <div className=\"nameproperty\">NAME</div>\r\n          <div className=\"countproperty\">COUNT</div>\r\n        </div>\r\n        {inventory?.map(item => (\r\n        <Item \r\n          placeID={item.placeId}\r\n          key={item.id}\r\n          name={item.data.name} \r\n          count={item.data.count}\r\n          id={item.id}\r\n        />\r\n        ))}\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button className=\"button\" onClick={()=>{\r\n          setOpenedAddItemModal(true)\r\n        }}>Add Item</button>\r\n        <button className=\"button\" onClick={() => { \r\n          setIsModalVisible(true)\r\n        }}>Delete Item</button>\r\n        <button className=\"button\">Modify Item</button>\r\n      </div>\r\n      <DeleteItemModal \r\n        isVisible={isModalVisible}\r\n        setIsVisible={setIsModalVisible}\r\n        inventory={inventory}\r\n        setInventory={setInventory}\r\n        selectedPlace={selectedPlace}\r\n      />\r\n      <AddItemModal\r\n        isVisible={openedAddItemModal}\r\n        setIsVisible={setOpenedAddItemModal}\r\n        places={places}\r\n        setInventory={setInventory}\r\n      />\r\n      {/* <button className=\"button\">Modify Item</button> */}\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls."],"sourceRoot":""}