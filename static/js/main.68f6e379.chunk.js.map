{"version":3,"sources":["firebaseDb/index.ts","place.tsx","components/formik-forms/delete-item-form/index.tsx","components/modals/delete-item/index.tsx","components/formik-forms/add-item-form/index.tsx","components/modals/add-item/index.tsx","components/formik-forms/modify-item-form/index.tsx","components/modals/modify-item/index.tsx","App.tsx","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","clickedId","fireStore","clickedParts","Place","id","name","parts","setSelect","setSelectedPlace","className","onClick","getId","getParts","Item","placeID","count","PlaceList","props","places1","map","place","placeId","topLvl","drawParts","key","data","OptGroup","Select","Option","DeleteItemForm","React","memo","inventory","selectedPlace","setSelectedItem","initialValues","itemForRemove","onSubmit","enableReinitialize","onChange","label","item","value","DeleteItemModal","isVisible","setIsVisible","setInventory","useState","selectedItem","isLoading","setIsLoading","useCallback","itemId","firestore","collection","doc","delete","then","get","response","docs","x","notification","error","message","description","useSubmit","title","visible","onOk","confirmLoading","onCancel","AddItemForm","places","setCount","setInventoryName","setPlaceId","inventoryName","min","max","defaultValue","placeholder","onBlur","event","target","AddItemModal","set","ModifyItemForm","JSON","stringify","ModifyItemModal","itemInfo","parse","App","setPlaces","setSelectPlace","openedDeleteItemModal","setOpenedDeleteItemModal","openedModifyItemModal","setOpenedModifyItemModal","openedAddItemModal","setOpenedAddItemModal","useEffect","part","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAYAA,gBAXuB,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAKJ,ICVHC,EDUSC,EAAYT,c,SCTzBQ,EAAU,KACV,IAIIE,EACJA,EAAa,KAKN,SAASC,EAAT,GAAmE,IAAnDC,EAAkD,EAAlDA,GAAIC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,iBAE/C,OACI,6BACI,4BAAQC,UAAY,QAAQC,QAAS,WACjCH,EAAUH,GAfZ,SAACA,GACXJ,EAAUI,EAeEO,CAAMP,GACNI,EAAiBJ,GAXhB,SAACE,GACdJ,EAAaI,EAWDM,CAASN,KAERD,IAMV,SAASQ,EAAT,GAA6C,EAA9BT,GAA+B,IAA3BU,EAA0B,EAA1BA,QAAST,EAAiB,EAAjBA,KAAMU,EAAW,EAAXA,MACrC,OAAGD,IAAUd,EAEL,yBAAKS,UAAY,QACb,yBAAKA,UAAU,YAAYJ,GAC3B,yBAAKI,UAAU,aAAaM,IAM7B,KAIR,SAASC,EAAUC,GAAiH,IAChIC,EAAwCD,EAAxCC,QAASX,EAA+BU,EAA/BV,UAAWC,EAAoBS,EAApBT,iBA2B3B,OACI,oCAAMU,QAAN,IAAMA,OAAN,EAAMA,EAASC,KAAI,SAACC,GAChB,GA3BO,SAACC,GACZ,GAAGH,GAAWG,EAAQ,CAAC,IAAD,gBACEH,GADF,IAClB,2BAA4B,CAAC,IAAlBE,EAAiB,QACxB,GAAIA,EAAMd,MAAM,CAAC,IAAD,gBACQc,EAAMd,OADd,IACZ,IAAI,EAAJ,qBAAgC,CAC5B,GAD4B,UAChBe,EACR,OAAO,GAHH,iCAFF,8BAUlB,OAAO,GAgBJC,CAAOF,EAAMhB,KAZN,SAACiB,GACf,GAAGnB,EAAa,CAAC,IAAD,gBACQA,GADR,IACZ,2BAAiC,CAC7B,GAAGmB,IAD0B,QAEzB,OAAO,GAHH,gCAWWE,CAAUH,EAAMhB,IACnC,OACI,kBAACD,EAAD,CACAqB,IAAOJ,EAAMhB,GACbC,KAAQe,EAAMK,KAAKpB,KACnBC,MAASc,EAAMd,MACfF,GAAMgB,EAAMhB,GACZG,UAAWA,EACXC,iBAAkBA,Q,gDC7E9BkB,G,OAAqBC,IAArBD,UAAUE,EAAWD,IAAXC,OAYLC,EAAiBC,IAAMC,MAAK,SAACd,GAAkB,IACjDe,EAA2Cf,EAA3Ce,UAAUC,EAAiChB,EAAjCgB,cAAcC,EAAmBjB,EAAnBiB,gBAK/B,OACI,kBAAC,IAAD,CACIC,cANc,CAClBC,cAAe,IAMXC,SAAU,aACVC,oBAAkB,IACjB,kBACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQjC,KAAK,gBAAgBI,UAAU,SAAS8B,SAAUL,GACtD,kBAACR,EAAD,CAAUc,MAAM,cAAc/B,UAAU,YAAxC,OACKuB,QADL,IACKA,OADL,EACKA,EAAWb,KAAI,SAACsB,GACb,GAAGR,IAAkBQ,EAAKpB,QACtB,OAAO,kBAACO,EAAD,CAAQnB,UAAU,SACjBe,IAAKiB,EAAKrC,GACVsC,MAAOD,EAAKrC,IAEY,KAAnBqC,EAAKhB,KAAKpB,KAAc,eAAiBoC,EAAKhB,KAAKpB,KAJzD,MAIkEoC,EAAKrC,gBCzBrGuC,EAAkBb,IAAMC,MAAK,SAACd,GAAkB,IAErD2B,EAKA3B,EALA2B,UACAC,EAIA5B,EAJA4B,aACAb,EAGAf,EAHAe,UACAC,EAEAhB,EAFAgB,cACAa,EACA7B,EADA6B,aANoD,EAShBC,mBAAiB,IATD,mBASjDC,EATiD,KASnCd,EATmC,OAUtBa,oBAAkB,GAVI,mBAUjDE,EAViD,KAYlDZ,EAwBV,SAAmBS,EAAiBI,GAChC,OAAOC,uBAAY,SACfC,EACAP,GAEc,KAAXO,GAOHF,GAAa,GACb1D,IAAS6D,YAAYC,WAAW,aAAaC,IAAIH,GAAQI,SAASC,MAAK,WAC/DxD,EAAUqD,WAAW,aAAaI,MAAMD,MAAK,SAAAE,GACzC,IAAMC,EAAOD,EAASC,KAAKzC,KAAI,SAAA0C,GAAC,YAAK,CACjCzD,GAAIyD,EAAEzD,GACNqB,KAAMoC,EAAEpC,OACRJ,QAAO,UAAEwC,EAAEpC,OAAOL,aAAX,aAAE,EAAgBhB,OAE7B0C,EAAac,GACbV,GAAa,GACbL,GAAa,UAhBrBiB,IAAaC,MAAM,CACfC,QAAS,UACTC,YAAa,2BAiBvB,CAACnB,EAAcI,IAjDAgB,CAAUpB,EAZ6B,MAcxD,OACI,kBAAC,IAAD,CACIqB,MAAM,cACNC,QAASxB,EACTyB,KAAM,WAEFhC,EAASW,EAAaH,IAE1ByB,eAAgBrB,EAChBsB,SAAU,WACN1B,GAAa,KAGjB,kBAAChB,EAAD,CACIG,UAAWA,EACXC,cAAeA,EACfC,gBAAiBA,Q,sBCpCzBR,EAAqBC,IAArBD,SAAUE,EAAWD,IAAXC,OAWL4C,EAAc1C,IAAMC,MAAK,SAACd,GAAkB,IAEjDwD,EAIAxD,EAJAwD,OACAC,EAGAzD,EAHAyD,SACAC,EAEA1D,EAFA0D,iBACAC,EACA3D,EADA2D,WAEEzC,EAAgB,CAClBpB,MAAM,EACN8D,cAAc,GACdxD,QAAQ,IAGZ,OACI,kBAAC,IAAD,CACIc,cAAeA,EACfE,SAAU,aACVC,oBAAkB,IACjB,kBACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIwC,IAAK,EACLC,IAAK,GACL1E,KAAK,QACL2E,aAAc7C,EAAcpB,MAC5BwB,SAAUmC,IAEd,kBAAC,IAAD,CACIrE,KAAK,gBACL4E,YAAY,iBACZD,aAAc7C,EAAc0C,cAC5BK,OAAQ,SAACC,GACLR,EAAiBQ,EAAMC,OAAO1C,UAGtC,kBAAC,IAAD,CAAQrC,KAAK,UAAUI,UAAU,SAAS8B,SAAUqC,GAChD,kBAAC,EAAD,CAAUpC,MAAM,cAAc/B,UAAU,YAAxC,OACKgE,QADL,IACKA,OADL,EACKA,EAAQtD,KAAI,SAACC,GACV,OAAO,kBAAC,EAAD,CAAQX,UAAU,SACbe,IAAKJ,EAAMhB,GACXsC,MAAOtB,EAAMhB,IAEQ,KAApBgB,EAAMK,KAAKpB,KAAc,gBAAkBe,EAAMK,KAAKpB,kBC/CtFgF,EAAevD,IAAMC,MAAK,SAACd,GAAkB,IAC/CwD,EAAUxD,EAAVwD,OAEH7B,EAGA3B,EAHA2B,UACAC,EAEA5B,EAFA4B,aACAC,EACA7B,EADA6B,aALiD,EAQ3BC,mBAAsC,GARX,mBAQ9ChC,EAR8C,KAQvC2D,EARuC,OASX3B,mBAAiB,IATN,mBAS9C8B,EAT8C,KAS/BF,EAT+B,OAUvB5B,mBAAiB,IAVM,mBAU9C1B,EAV8C,KAUrCuD,EAVqC,OAWnB7B,oBAAkB,GAXC,mBAW9CE,EAX8C,KAa/CZ,EAuBV,SAAmBS,EAAiBI,GAChC,OAAOC,uBAAY,SACfpC,EACA8D,EACAxD,EACAwB,GAEI9B,GAAW8D,GAAkBxD,GAOjC6B,GAAa,GAEb1D,IAAS6D,YAAYC,WAAW,aAAaC,MAAM+B,IAAI,CACnDjF,KAAMwE,EACN9D,MAAOA,EACPK,MAAO5B,IAAS6D,YAAYC,WAAW,UAAUC,IAAIlC,KACtDoC,MAAK,WACJxD,EAAUqD,WAAW,aAAaI,MAAMD,MAAK,SAAAE,GACzC,IAAMC,EAAOD,EAASC,KAAKzC,KAAI,SAAA0C,GAAC,YAAK,CACjCzD,GAAIyD,EAAEzD,GACNqB,KAAMoC,EAAEpC,OACRJ,QAAO,UAAEwC,EAAEpC,OAAOL,aAAX,aAAE,EAAgBhB,OAE7B0C,EAAac,GACbV,GAAa,GACbL,GAAa,UArBjBiB,IAAaC,MAAM,CACfC,QAAS,UACTC,YAAa,4BAsBvB,CAACnB,EAAcI,IAvDAgB,CAAUpB,EAb0B,MAerD,OACI,kBAAC,IAAD,CACIqB,MAAM,WACNC,QAASxB,EACTyB,KAAM,WACFhC,EAAStB,EAAM8D,EAAcxD,EAAQwB,IAEzCyB,eAAgBrB,EAChBsB,SAAU,WACN1B,GAAa,KAGjB,kBAAC2B,EAAD,CAAaC,OAAQA,EACjBC,SAAUA,EACVC,iBAAkBA,EAClBC,WAAYA,Q,aCtCpBlD,EAAqBC,IAArBD,SAAUE,EAAWD,IAAXC,OAaL2D,EAAiBzD,IAAMC,MAAK,SAACd,GAAkB,IAEpDe,EAIAf,EAJAe,UACAC,EAGAhB,EAHAgB,cACAC,EAEAjB,EAFAiB,gBACAwC,EACAzD,EADAyD,SAMJ,OACI,kBAAC,IAAD,CACIvC,cANc,CAClBC,cAAe,IAMXC,SAAU,aACVC,oBAAkB,IACjB,kBACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIwC,IAAK,EACLC,IAAK,GACL1E,KAAK,QACL2E,aAAc,EACdzC,SAAUmC,IAEd,kBAAC,IAAD,CAAQrE,KAAK,gBAAgBI,UAAU,SAAS8B,SAAUL,GACtD,kBAAC,EAAD,CAAUM,MAAM,cAAc/B,UAAU,YAAxC,OACKuB,QADL,IACKA,OADL,EACKA,EAAWb,KAAI,SAACsB,GACb,GAAGR,IAAkBQ,EAAKpB,QACtB,OAAO,kBAAC,EAAD,CAAQZ,UAAU,SACjBe,IAAKiB,EAAKrC,GACVsC,MAAO8C,KAAKC,UAAU,CAAErF,GAAIqC,EAAKrC,GAAIC,KAAMoC,EAAKhB,KAAKpB,KAAMe,MAAOqB,EAAKpB,WAE/C,KAAnBoB,EAAKhB,KAAKpB,KAAc,eAAiBoC,EAAKhB,KAAKpB,KAJzD,MAIkEoC,EAAKrC,gBCrCrGsF,EAAkB5D,IAAMC,MAAK,SAACd,GAAkB,IAErD2B,EAKA3B,EALA2B,UACAC,EAIA5B,EAJA4B,aACAb,EAGAf,EAHAe,UACAC,EAEAhB,EAFAgB,cACAa,EACA7B,EADA6B,aANoD,EAShBC,mBAAiB,IATD,mBASjDC,EATiD,KASnCd,EATmC,OAUtBa,oBAAkB,GAVI,mBAUjDE,EAViD,KAUtCC,EAVsC,OAW9BH,mBAAsC,GAXR,mBAWjDhC,EAXiD,KAW1C2D,EAX0C,KAalDrC,EAyBV,SAAmBS,EAAiBI,GAChC,OAAOC,uBAAY,SACfpC,EACA2B,EACAG,GAEA,IAAM8C,EAAWH,KAAKI,MAAMlD,GACxB3B,GAAU2B,GAOdQ,GAAa,GACb1D,IAAS6D,YAAYC,WAAW,aAAaC,IAAIoC,EAASvF,IAAIoD,SAASC,MAAK,WACpEjE,IAAS6D,YAAYC,WAAW,aAAaC,MAAM+B,IAAI,CACnDjF,KAAMsF,EAAStF,KACfU,MAAOA,EACPK,MAAO5B,IAAS6D,YAAYC,WAAW,UAAUC,IAAIoC,EAASvE,SAC/DqC,MAAK,WACJxD,EAAUqD,WAAW,aAAaI,MAAMD,MAAK,SAAAE,GACzC,IAAMC,EAAOD,EAASC,KAAKzC,KAAI,SAAA0C,GAAC,YAAK,CACjCzD,GAAIyD,EAAEzD,GACNqB,KAAMoC,EAAEpC,OACRJ,QAAO,UAAEwC,EAAEpC,OAAOL,aAAX,aAAE,EAAgBhB,OAE7B0C,EAAac,GACbV,GAAa,GACbL,GAAa,aArBzBiB,IAAaC,MAAM,CACfC,QAAS,UACTC,YAAa,4BAuBvB,CAACnB,EAAcI,IA1DAgB,CAAUpB,EAAaI,GAExC,OACI,kBAAC,IAAD,CACIiB,MAAM,cACNC,QAASxB,EACTyB,KAAM,WAEFhC,EAAStB,EAAMiC,EAAaH,IAEhCyB,eAAgBrB,EAChBsB,SAAU,WACN1B,GAAa,KAGjB,kBAAC0C,EAAD,CACIvD,UAAWA,EACXC,cAAeA,EACfC,gBAAiBA,EACjBwC,SAAUA,QC3BnB,IAAMmB,EAAM/D,IAAMC,MAAK,WAAO,IAAD,EAEJgB,qBAFI,mBAEzB0B,EAFyB,KAEjBqB,EAFiB,OAGE/C,qBAHF,mBAGzBf,EAHyB,KAGdc,EAHc,OAKMC,qBALN,mBAKZgD,GALY,aAMUhD,mBAAiB,IAN3B,mBAMzBd,EANyB,KAMVzB,EANU,OAO0BuC,oBAAkB,GAP5C,mBAOzBiD,EAPyB,KAOFC,EAPE,OAQ0BlD,oBAAkB,GAR5C,mBAQzBmD,EARyB,KAQFC,EARE,OASoBpD,oBAAkB,GATtC,mBASzBqD,EATyB,KASLC,EATK,KA+BlC,OApBAC,qBAAU,WACRrG,EAAUqD,WAAW,UAAUI,MAAMD,MAAK,SAAAE,GACpC,IAAMC,EAAOD,EAASC,KAAKzC,KAAI,SAAA0C,GAAC,MAAK,CACnCzD,GAAIyD,EAAEzD,GACNqB,KAAMoC,EAAEpC,OACRnB,MAAOuD,EAAEpC,OAAOnB,OAASuD,EAAEpC,OAAOnB,MAAMa,KAAI,SAACoF,GAAD,cAAcA,QAAd,IAAcA,OAAd,EAAcA,EAAMnG,UAElE0F,EAAUlC,MAGhB3D,EAAUqD,WAAW,aAAaI,MAAMD,MAAK,SAAAE,GAC3C,IAAMC,EAAOD,EAASC,KAAKzC,KAAI,SAAA0C,GAAC,YAAK,CACnCzD,GAAIyD,EAAEzD,GACNqB,KAAMoC,EAAEpC,OACRJ,QAAO,UAAEwC,EAAEpC,OAAOL,aAAX,aAAE,EAAgBhB,OAE3B0C,EAAac,QAEf,IAGA,yBAAKnD,UAAY,OACf,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cAAf,UACA,kBAACO,EAAD,CAAWE,QAASuD,EAAQlE,UAAWwF,EAAgBvF,iBAAkBA,KAE3E,yBAAKC,UAAY,SACf,yBAAKA,UAAU,aAAf,SACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBAAf,QACA,yBAAKA,UAAU,iBAAf,UAJJ,OAMGuB,QANH,IAMGA,OANH,EAMGA,EAAWb,KAAI,SAAAsB,GAAI,OACpB,kBAAC5B,EAAD,CACEC,QAAS2B,EAAKpB,QACdG,IAAKiB,EAAKrC,GACVC,KAAMoC,EAAKhB,KAAKpB,KAChBU,MAAO0B,EAAKhB,KAAKV,MACjBX,GAAIqC,EAAKrC,SAIb,yBAAKK,UAAU,WACb,4BAAQA,UAAU,SAASC,QAAS,WAClC2F,GAAsB,KADxB,YAGA,4BAAQ5F,UAAU,SAASC,QAAS,WAClCuF,GAAyB,KAD3B,eAGA,4BAAQxF,UAAU,SAASC,QAAS,WAClCyF,GAAyB,KAD3B,gBAIF,kBAACxD,EAAD,CACEC,UAAWoD,EACXnD,aAAcoD,EACdjE,UAAWA,EACXc,aAAcA,EACdb,cAAeA,IAEjB,kBAACyD,EAAD,CACE9C,UAAWsD,EACXrD,aAAcsD,EACdnE,UAAWA,EACXc,aAAcA,EACdb,cAAeA,IAEjB,kBAACoD,EAAD,CACEzC,UAAWwD,EACXvD,aAAcwD,EACd5B,OAAQA,EACR3B,aAAcA,QClGtB0D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.68f6e379.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\r\n    authDomain: \"dv-inventory.firebaseapp.com\",\r\n    databaseURL: \"https://dv-inventory.firebaseio.com\",\r\n    projectId: \"dv-inventory\",\r\n    storageBucket: \"dv-inventory.appspot.com\",\r\n    messagingSenderId: \"130062240176\",\r\n    appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\"\r\n};\r\n\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const fireStore = firebase.firestore()","import React from 'react';\r\nimport {IPlaces} from \"./App\";\r\n\r\nlet clickedId:any;\r\nclickedId=null;\r\nconst getId = (id:any) =>{\r\n    clickedId=id;\r\n}\r\n\r\nlet clickedParts:any;\r\nclickedParts=null;\r\nconst getParts = (parts:any) =>{\r\n    clickedParts=parts;\r\n}\r\n\r\nexport function Place({id, name, parts, setSelect, setSelectedPlace}:any){\r\n\r\n    return(\r\n        <div>\r\n            <button className = \"place\" onClick={() => {\r\n                setSelect(id); \r\n                getId(id);\r\n                setSelectedPlace(id);\r\n                getParts(parts)}}\r\n            >\r\n                {name}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function Item({id, placeID, name, count}:any){\r\n    if(placeID===clickedId){\r\n        return(\r\n            <div className = \"item\">\r\n                <div className=\"itemname\">{name}</div>\r\n                <div className=\"itemcount\">{count}</div>\r\n                {/* <div className=\"item-instance\">{id}</div> */}\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(null)\r\n    }\r\n}\r\n\r\nexport function PlaceList(props:{places1:IPlaces[] | undefined, setSelect:(value:any) => void, setSelectedPlace:(values:string) => void }){\r\n    const {places1, setSelect, setSelectedPlace} = props;\r\n\r\n    const topLvl = (placeId:string) => {\r\n        if(places1 && placeId){\r\n            for (const place of places1){\r\n                if (place.parts){\r\n                    for(const partId of place.parts){\r\n                        if(partId===placeId){\r\n                            return(false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return(true);\r\n        }\r\n    }\r\n\r\n    const drawParts = (placeId:string) => {\r\n        if(clickedParts){\r\n            for (const parts of clickedParts){\r\n                if(placeId===parts){\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>{places1?.map((place:any) => {\r\n            if(topLvl(place.id) || drawParts(place.id)){\r\n                return(\r\n                    <Place \r\n                    key = {place.id}\r\n                    name = {place.data.name} \r\n                    parts = {place.parts} \r\n                    id = {place.id}\r\n                    setSelect={setSelect}\r\n                    setSelectedPlace={setSelectedPlace}\r\n                    />\r\n                )\r\n            }\r\n        })}</div>\r\n    )\r\n}","import React  from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form, Select} from 'formik-antd';\r\n// import \"antd/dist/antd.css\";\r\nimport \"antd/dist/antd.less\";\r\nimport { IInventory } from \"../../../App\";\r\n\r\nconst { OptGroup, Option } = Select;\r\n\r\ninterface IProps{\r\n    inventory:IInventory[] | undefined;\r\n    selectedPlace:string | undefined;\r\n    setSelectedItem: (state:string) => void;\r\n}\r\ninterface IInitialValues {\r\n    itemForRemove:string;\r\n    \r\n}\r\n\r\nexport const DeleteItemForm = React.memo((props:IProps) => {\r\n    const {inventory,selectedPlace,setSelectedItem} = props;\r\n    const initialValues = {\r\n        itemForRemove: \"\",\r\n    }\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={initialValues}\r\n            onSubmit={()=>{}}\r\n            enableReinitialize>\r\n            {() => (\r\n                <Form>\r\n                    <Select name=\"itemForRemove\" className=\"select\" onChange={setSelectedItem}>\r\n                        <OptGroup label=\"Delete Item\" className=\"optGroup\">\r\n                            {inventory?.map((item) => {\r\n                                if(selectedPlace === item.placeId){\r\n                                    return <Option className=\"option\"\r\n                                            key={item.id}\r\n                                            value={item.id}\r\n                                            >\r\n                                                {item.data.name === \"\" ? \"Unknown Item\" : item.data.name} - {item.id}\r\n                                            </Option>\r\n                                }\r\n                                \r\n                            })}\r\n                        </OptGroup>\r\n                    </Select>\r\n                </Form>\r\n                \r\n            )}\r\n        </Formik>\r\n    )\r\n});\r\n\r\n","import React, { useState, useCallback } from 'react';\r\nimport { Modal,notification } from 'antd';\r\nimport { DeleteItemForm } from '../../formik-forms/delete-item-form';\r\nimport { IInventory } from '../../../App';\r\nimport firebase from 'firebase';\r\nimport { fireStore } from '../../../firebaseDb';\r\n\r\ninterface IProps {\r\n    isVisible:boolean;\r\n    inventory:IInventory[] | undefined;\r\n    selectedPlace:string | undefined;\r\n    setInventory:(inventory:IInventory[]) => void;\r\n    setIsVisible:(state:boolean) => void;\r\n};\r\n\r\nexport const DeleteItemModal = React.memo((props:IProps) => {\r\n    const {\r\n        isVisible,\r\n        setIsVisible,\r\n        inventory,\r\n        selectedPlace,\r\n        setInventory\r\n    } = props;\r\n\r\n    const [selectedItem, setSelectedItem] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n    const onSubmit = useSubmit(setInventory,setIsLoading);\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Delete Item\"\r\n            visible={isVisible}\r\n            onOk={() => {\r\n                // setIsVisible(false)\r\n                onSubmit(selectedItem,setIsVisible)\r\n            }}\r\n            confirmLoading={isLoading}\r\n            onCancel={() => {\r\n                setIsVisible(false)\r\n            }}\r\n        >\r\n            <DeleteItemForm \r\n                inventory={inventory}\r\n                selectedPlace={selectedPlace}\r\n                setSelectedItem={setSelectedItem}\r\n            />\r\n        </Modal>\r\n    )\r\n});\r\n\r\nfunction useSubmit(setInventory:any,setIsLoading:any){\r\n    return useCallback((\r\n        itemId: string,\r\n        setIsVisible:any,\r\n    ) => {\r\n        if(itemId === \"\"){\r\n            notification.error({\r\n                message: \"Oops...\",\r\n                description: \"Field must be filled\",\r\n            });\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        firebase.firestore().collection(\"inventory\").doc(itemId).delete().then(() => {\r\n                fireStore.collection(\"inventory\").get().then(response => { \r\n                    const docs = response.docs.map(x => ({ \r\n                        id: x.id,\r\n                        data: x.data(), \r\n                        placeId: x.data().place?.id\r\n                    })); \r\n                    setInventory(docs);\r\n                    setIsLoading(false);\r\n                    setIsVisible(false);\r\n                });\r\n            });\r\n    },[setInventory, setIsLoading]);\r\n}","import React, { Dispatch, SetStateAction }  from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form } from 'formik-antd';\r\nimport \"antd/dist/antd.less\";\r\n// import \"antd/dist/antd.css\";\r\nimport { IPlaces } from \"../../../App\";\r\nimport { InputNumber, Input, } from 'antd';\r\nimport {Select} from 'formik-antd';\r\n\r\nconst { OptGroup, Option } = Select;\r\n\r\n\r\ninterface IProps{\r\n    places:IPlaces[] |undefined;\r\n    setCount:(state:string | number | undefined) => void;\r\n    setInventoryName:Dispatch<SetStateAction<string>>;\r\n    setPlaceId:Dispatch<SetStateAction<string>>;\r\n};\r\ninterface IInitialValues {};\r\n\r\nexport const AddItemForm = React.memo((props:IProps) => {\r\n    const {\r\n        places,\r\n        setCount,\r\n        setInventoryName,\r\n        setPlaceId,\r\n    } = props;\r\n    const initialValues = {\r\n        count:1,\r\n        inventoryName:\"\",\r\n        placeId:\"\",\r\n    }\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={initialValues}\r\n            onSubmit={()=>{}}\r\n            enableReinitialize>\r\n            {() => (\r\n                <Form>\r\n                    <InputNumber \r\n                        min={1}\r\n                        max={99}\r\n                        name=\"count\"\r\n                        defaultValue={initialValues.count}\r\n                        onChange={setCount}\r\n                    />\r\n                    <Input \r\n                        name=\"inventoryName\"\r\n                        placeholder=\"Inventory name\"\r\n                        defaultValue={initialValues.inventoryName}\r\n                        onBlur={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                            setInventoryName(event.target.value)\r\n                        }}\r\n                    />\r\n                    <Select name=\"placeId\" className=\"select\" onChange={setPlaceId}>\r\n                        <OptGroup label=\"Delete Item\" className=\"optGroup\">\r\n                            {places?.map((place) => {\r\n                                return <Option className=\"option\"\r\n                                            key={place.id}\r\n                                            value={place.id}\r\n                                        >\r\n                                            {place.data.name === \"\" ? \"Unknown place\" : place.data.name}\r\n                                        </Option>\r\n                            })}\r\n                        </OptGroup>\r\n                    </Select>\r\n                </Form>\r\n                \r\n            )}\r\n        </Formik>\r\n    )\r\n});\r\n\r\n","import React, { useState, useCallback } from 'react';\r\nimport { Modal, notification } from 'antd';\r\nimport { IInventory } from '../../../App';\r\nimport firebase from 'firebase';\r\nimport { fireStore } from '../../../firebaseDb';\r\nimport { AddItemForm } from '../../formik-forms/add-item-form';\r\nimport { IPlaces } from '../../../App';\r\n\r\ninterface IProps {\r\n    isVisible:boolean;\r\n    places:IPlaces[] | undefined;\r\n    setInventory:(inventory:IInventory[]) => void;\r\n    setIsVisible:(state:boolean) => void;\r\n};\r\n\r\nexport const AddItemModal = React.memo((props:IProps) => {\r\n    const {places} = props;\r\n    const {\r\n        isVisible,\r\n        setIsVisible,\r\n        setInventory,\r\n    } = props;\r\n\r\n    const [count, setCount] = useState<string | number | undefined>(1)\r\n    const [inventoryName, setInventoryName] = useState<string>(\"\")\r\n    const [placeId, setPlaceId] = useState<string>(\"\")\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n    const onSubmit = useSubmit(setInventory,setIsLoading);\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Add Item\"\r\n            visible={isVisible}\r\n            onOk={() => {\r\n                onSubmit(count,inventoryName,placeId,setIsVisible)\r\n            }}\r\n            confirmLoading={isLoading}\r\n            onCancel={() => {\r\n                setIsVisible(false)\r\n            }}\r\n        >\r\n            <AddItemForm places={places}\r\n                setCount={setCount}\r\n                setInventoryName={setInventoryName}\r\n                setPlaceId={setPlaceId}\r\n            />\r\n        </Modal>\r\n    )\r\n});\r\n\r\nfunction useSubmit(setInventory:any,setIsLoading:any){\r\n    return useCallback((\r\n        count: string | number | undefined,\r\n        inventoryName:string,\r\n        placeId:string,\r\n        setIsVisible:any,\r\n    ) => {\r\n        if(!count ||  !inventoryName || !placeId){\r\n            notification.error({\r\n                message: \"Oops...\",\r\n                description: \"Fields must be filled\",\r\n            });\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n\r\n        firebase.firestore().collection(\"inventory\").doc().set({ \r\n            name: inventoryName, \r\n            count: count, \r\n            place: firebase.firestore().collection(\"places\").doc(placeId) // main-101 – id места\r\n        }).then(() => {\r\n            fireStore.collection(\"inventory\").get().then(response => { \r\n                const docs = response.docs.map(x => ({ \r\n                    id: x.id,\r\n                    data: x.data(), \r\n                    placeId: x.data().place?.id\r\n                })); \r\n                setInventory(docs);\r\n                setIsLoading(false);\r\n                setIsVisible(false);\r\n            });\r\n        });\r\n    },[setInventory, setIsLoading]);\r\n}","import React  from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Form, Select, InputNumber} from 'formik-antd';\r\n// import \"antd/dist/antd.css\";\r\nimport \"antd/dist/antd.less\";\r\nimport { IInventory } from \"../../../App\";\r\n\r\nconst { OptGroup, Option } = Select;\r\n\r\ninterface IProps{\r\n    inventory:IInventory[] | undefined;\r\n    selectedPlace:string | undefined;\r\n    setSelectedItem: (state:string) => void;\r\n    setCount:(state:string | number | undefined) => void;\r\n}\r\ninterface IInitialValues {\r\n    itemForRemove:string;\r\n    \r\n}\r\n\r\nexport const ModifyItemForm = React.memo((props:IProps) => {\r\n    const {\r\n        inventory,\r\n        selectedPlace,\r\n        setSelectedItem,\r\n        setCount,\r\n    } = props;\r\n    const initialValues = {\r\n        itemForRemove: \"\",\r\n    }\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={initialValues}\r\n            onSubmit={()=>{}}\r\n            enableReinitialize>\r\n            {() => (\r\n                <Form>\r\n                    <InputNumber \r\n                        min={1}\r\n                        max={99}\r\n                        name=\"count\"\r\n                        defaultValue={1}\r\n                        onChange={setCount}\r\n                    />\r\n                    <Select name=\"itemForRemove\" className=\"select\" onChange={setSelectedItem}>\r\n                        <OptGroup label=\"Modify Item\" className=\"optGroup\">\r\n                            {inventory?.map((item) => {\r\n                                if(selectedPlace === item.placeId){\r\n                                    return <Option className=\"option\"\r\n                                            key={item.id}\r\n                                            value={JSON.stringify({ id: item.id, name: item.data.name, place: item.placeId})}\r\n                                            >\r\n                                                {item.data.name === \"\" ? \"Unknown Item\" : item.data.name} - {item.id}\r\n                                            </Option>\r\n                                }\r\n                                \r\n                            })}\r\n                        </OptGroup>\r\n                    </Select>\r\n                </Form>\r\n                \r\n            )}\r\n        </Formik>\r\n    )\r\n});\r\n\r\n","import React, { useState, useCallback } from 'react';\r\nimport { Modal,notification } from 'antd';\r\nimport { DeleteItemForm } from '../../formik-forms/delete-item-form';\r\nimport { IInventory } from '../../../App';\r\nimport firebase from 'firebase';\r\nimport { fireStore } from '../../../firebaseDb';\r\nimport { ModifyItemForm } from '../../formik-forms/modify-item-form';\r\n\r\ninterface IProps {\r\n    isVisible:boolean;\r\n    inventory:IInventory[] | undefined;\r\n    selectedPlace:string | undefined;\r\n    setInventory:(inventory:IInventory[]) => void;\r\n    setIsVisible:(state:boolean) => void;\r\n};\r\n\r\nexport const ModifyItemModal = React.memo((props:IProps) => {\r\n    const {\r\n        isVisible,\r\n        setIsVisible,\r\n        inventory,\r\n        selectedPlace,\r\n        setInventory\r\n    } = props;\r\n\r\n    const [selectedItem, setSelectedItem] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n    const [count, setCount] = useState<string | number | undefined>(1)\r\n\r\n    const onSubmit = useSubmit(setInventory,setIsLoading);\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Modify Item\"\r\n            visible={isVisible}\r\n            onOk={() => {\r\n                // setIsVisible(false)\r\n                onSubmit(count,selectedItem,setIsVisible)\r\n            }}\r\n            confirmLoading={isLoading}\r\n            onCancel={() => {\r\n                setIsVisible(false)\r\n            }}\r\n        >\r\n            <ModifyItemForm \r\n                inventory={inventory}\r\n                selectedPlace={selectedPlace}\r\n                setSelectedItem={setSelectedItem}\r\n                setCount={setCount}\r\n            />\r\n        </Modal>\r\n    )\r\n});\r\n\r\nfunction useSubmit(setInventory:any,setIsLoading:any){\r\n    return useCallback((\r\n        count:string | number | undefined,\r\n        value: string,\r\n        setIsVisible:any,\r\n    ) => {\r\n        const itemInfo = JSON.parse(value);\r\n        if(!count || !value){\r\n            notification.error({\r\n                message: \"Oops...\",\r\n                description: \"Fields must be filled\",\r\n            });\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        firebase.firestore().collection(\"inventory\").doc(itemInfo.id).delete().then(() => {\r\n                firebase.firestore().collection(\"inventory\").doc().set({ \r\n                    name: itemInfo.name, \r\n                    count: count, \r\n                    place: firebase.firestore().collection(\"places\").doc(itemInfo.place) // main-101 – id места\r\n                }).then(() => {\r\n                    fireStore.collection(\"inventory\").get().then(response => { \r\n                        const docs = response.docs.map(x => ({\r\n                            id: x.id,\r\n                            data: x.data(), \r\n                            placeId: x.data().place?.id\r\n                        })); \r\n                        setInventory(docs);\r\n                        setIsLoading(false);\r\n                        setIsVisible(false);\r\n                    });\r\n                });\r\n            });\r\n    },[setInventory, setIsLoading]);\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport * as firebase from 'firebase';\r\nimport {fireStore} from \"./firebaseDb/index\";\r\nimport {Item, PlaceList} from \"./place\"\r\nimport {DeleteItemModal} from \"./components/modals/delete-item\"\r\nimport { AddItemModal } from './components/modals/add-item';\r\nimport { ModifyItemModal } from './components/modals/modify-item';\r\n\r\nexport interface IPlaces{\r\n    id: string;\r\n    data: firebase.firestore.DocumentData;\r\n    parts: any;\r\n}\r\n\r\nexport interface IInventory{\r\n  id: string;\r\n  data: firebase.firestore.DocumentData;\r\n  placeId: any;\r\n}\r\n\r\nexport const App = React.memo(() => {\r\n\r\n    const [places, setPlaces] = useState<IPlaces[]>();\r\n    const [inventory, setInventory] = useState<IInventory[]>();\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [selectPlace, setSelectPlace] = useState();\r\n    const [selectedPlace, setSelectedPlace] = useState<string>(\"\");\r\n    const [openedDeleteItemModal, setOpenedDeleteItemModal] = useState<boolean>(false);\r\n    const [openedModifyItemModal, setOpenedModifyItemModal] = useState<boolean>(false);\r\n    const [openedAddItemModal, setOpenedAddItemModal] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    fireStore.collection(\"places\").get().then(response => { \r\n          const docs = response.docs.map(x => ({ \r\n            id: x.id,\r\n            data: x.data(), \r\n            parts: x.data().parts && x.data().parts.map((part:any) => part?.id) \r\n          })); \r\n          setPlaces(docs)\r\n    });\r\n  \r\n    fireStore.collection(\"inventory\").get().then(response => { \r\n      const docs = response.docs.map(x => ({ \r\n        id: x.id,\r\n        data: x.data(), \r\n        placeId: x.data().place?.id\r\n      })); \r\n      setInventory(docs);\r\n    });\r\n  },[]);\r\n\r\n  return (\r\n    <div className = \"App\">\r\n      <div className=\"places\">\r\n        <div className=\"placeshead\">Places</div>\r\n        <PlaceList places1={places} setSelect={setSelectPlace} setSelectedPlace={setSelectedPlace}/>\r\n      </div>\r\n      <div className = \"items\">\r\n        <div className=\"itemshead\">Items</div>\r\n        <div className=\"itemsproperties\">\r\n          <div className=\"nameproperty\">NAME</div>\r\n          <div className=\"countproperty\">COUNT</div>\r\n        </div>\r\n        {inventory?.map(item => (\r\n        <Item \r\n          placeID={item.placeId}\r\n          key={item.id}\r\n          name={item.data.name} \r\n          count={item.data.count}\r\n          id={item.id}\r\n        />\r\n        ))}\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button className=\"button\" onClick={()=>{\r\n          setOpenedAddItemModal(true)\r\n        }}>Add Item</button>\r\n        <button className=\"button\" onClick={() => { \r\n          setOpenedDeleteItemModal(true)\r\n        }}>Delete Item</button>\r\n        <button className=\"button\" onClick={() => { \r\n          setOpenedModifyItemModal(true)\r\n        }}>Modify Item</button>\r\n      </div>\r\n      <DeleteItemModal \r\n        isVisible={openedDeleteItemModal}\r\n        setIsVisible={setOpenedDeleteItemModal}\r\n        inventory={inventory}\r\n        setInventory={setInventory}\r\n        selectedPlace={selectedPlace}\r\n      />\r\n      <ModifyItemModal \r\n        isVisible={openedModifyItemModal}\r\n        setIsVisible={setOpenedModifyItemModal}\r\n        inventory={inventory}\r\n        setInventory={setInventory}\r\n        selectedPlace={selectedPlace}\r\n      />\r\n      <AddItemModal\r\n        isVisible={openedAddItemModal}\r\n        setIsVisible={setOpenedAddItemModal}\r\n        places={places}\r\n        setInventory={setInventory}\r\n      />\r\n      {/* <button className=\"button\">Modify Item</button> */}\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls."],"sourceRoot":""}